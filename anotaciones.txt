################################## CÓMO AÑADIR UNA IMAGEN



=================== Controlador
const express = require('express');
const router = express.Router();
const multer = require('multer');
const GPU = require('../models/GPU');

const upload = multer({
    dest: 'uploads/',
    limits: {
        fileSize: 1000000 //1mb max
    },
    fileFilter(req, file, cb) {
        if(!file.originalname.match(/\.(jpg|jpeg|png)$/)) {
            return cb(new Error('Please upload an image'))
        }
        cb(undefined, true)
    }
});

router.post('/gpu', upload.single('image'), async (req, res) => {
    // Create new GPU object
    const gpu = new GPU({
        name: req.body.name,
        brand: req.body.brand,
        model: req.body.model,
        memory: req.body.memory,
        memory_type: req.body.memory_type,
        core_clock: req.body.core_clock,
        boost_clock: req.body.boost_clock,
        stream_processors: req.body.stream_processors,
        tdp: req.body.tdp,
        price: req.body.price,
        image: req.file.buffer //add image buffer
    });

    try {
        // Save GPU to the database
        await gpu.save();
        res.status(201).send(gpu);
    } catch (error) {
        res.status(400).send(error);
    }
});

module.exports = router;


Una forma de añadir imagenes

============== Modelo 
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const gpuSchema = new Schema({
    //Other fields in the schema
    image: {
        type: Buffer,
        required: true
    }
});

const GPU = mongoose.model('GPU', gpuSchema);

module.exports = GPU;


FORMULARIO : ================== vista

<form action="/gpu" method="post" enctype="multipart/form-data">
    <label for="name">Name</label>
    <input type="text" id="name" name="name" required>

    <label for="brand">Brand</label>
    <input type="text" id="brand" name="brand" required>
    
    <label for="model">Model</label>
    <input type="text" id="model" name="model" required>
    
    <label for="memory">Memory</label>
    <input type="text" id="memory" name="memory" pattern="^\d+( GB| TB)$" required>
    
    <label for="memory_type">Memory Type</label>
    <select id="memory_type" name="memory_type" required>
        <option value="GDDR5">GDDR5</option>
        <option value="GDDR6">GDDR6</option>
        <option value="GDDR7">GDDR7</option>
    </select>

    <label for="core_clock">Core Clock</label>
    <input type="text" id="core_clock" name="core_clock" pattern="^\d+ MHz$" required>

    <label for="boost_clock">Boost Clock</label>
    <input type="text" id="boost_clock" name="boost_clock" pattern="^\d+ MHz$" required>

    <label for="stream_processors">Stream Processors</label>
    <input type="number" id="stream_processors" name="stream_processors" min="0" required>

    <label for="tdp">TDP</label>
    <input type="number" id="tdp" name="tdp" min="0" required>

    <label for="price">Price</label>
    <input type="number" id="price" name="price" min="0" required>

    <label for="image">Image</label>
    <input type="file" id="image" name="image" accept="image/*" required>

    <input type="submit" value="Create GPU">
</form>


Este formulario cuenta con todos los campos necesarios para rellenar toda la información solicitada. También se ha utilizado atributos HTML5 como "pattern" y "min" para hacer validaciones en el lado del cliente, además de "required" para hacer campos obligatorios.
El atributo enctype = "multipart/form-data"
El atributo enctype en una etiqueta form especifica el tipo de codificación utilizada para enviar los datos del formulario al servidor. El valor multipart/form-data es utilizado para enviar archivos a través de un formulario, es decir, permite subir archivos al servidor. El tipo de codificación multipart/form-data permite enviar datos de varios tipos diferentes (texto e imágenes, por ejemplo) en un solo paquete HTTP. Es utilizado generalmente cuando se desea subir archivos como parte del formulario, y es necesario especificarlo cuando el formulario contiene campos de tipo "file".
Al utilizar esta codificación, el navegador agrega cabeceras adicionales al paquete HTTP, permitiendo que se interprete correctamente como una subida de archivos.


// Ahora para definir el crud voy a necesitar ver qué validaciones tendré que utilizar en express-validator para los formularios,
por suerte, ya hay algunos formularios hechos y sólo necesito indicar un poco cómo hacerlo.

<%- include('../partials/header.ejs') %>

<!DOCTYPE html>
<html>
<head>
  <title><%= title %></title>
</head>
<body>
  <h1>Brand: <%= brand.name %></h1>
  <div style="margin-left:20px;margin-top:20px">
    <h4>Cabinets</h4>
    <% if(brand_cabinets.length > 0){ %>
    <ul>
      <% brand_cabinets.forEach(function(cabinet){ %>
        <li>
            <a href="<%= cabinet.url %>"><%= cabinet.name %></a>
        </li>
      <% }); %>
    </ul>
    <% } else { %>
    <p>This brand has no cabinets</p>
    <% } %>
    <h4>GPUs</h4>
    <% if(brand_gpus.length > 0){ %>
    <ul>
      <% brand_gpus.forEach(function(gpu){ %>
        <li>
            <a href="<%= gpu.url %>"><%= gpu.name %></a>
        </li>
      <% }); %>
    </ul>
    <% } else { %>
    <p>This brand has no GPUs</p>
    <% } %>
    <h4>Motherboards</h4>
    <% if(brand_motherboards.length > 0){ %>
    <ul>
      <% brand_motherboards.forEach(function(motherboard){ %>
        <li>
            <a href="<%= motherboard.url %>"><%= motherboard.name %></a>
        </li>
      <% }); %>
    </ul>
    <% } else { %>
    <p>This brand has no motherboards</p>
    <% } %>
    <h4>Power Supplies</h4>
    <ul>
        <% for(var i=0; i < brand_powersupplies.length; i++) { %>
            <li>
                <a href="<%= brand_powersupplies[i].url %>"><%= brand_powersupplies[i].name %></a>
            </li>
        <% } %>
    </ul>
    <% if (brand_powersupplies.length === 0) { %>
        <p>This brand has no power supplies</p>
    <% } %>
    <h4>RAMs</h4>
    <ul>
        <% for(var i=0; i < brand_rams.length; i++) { %>
            <li>
                <a href="<%= brand_rams[i].url %>"><%= brand_rams[i].name %></a>
            </li>
        <% } %>
    </ul>
    <% if (brand_rams.length === 0) { %>
        <p>This brand has no RAMs</p>
    <% } %>
    <h4>Storages</h4>
    <ul>
        <% for(var i=0; i < brand_storages.length; i++) { %>
            <li>
                <a href="<%= brand_storages[i].url %>"><%= brand_storages[i].name %></a>
            </li>
        <% } %>
    </ul>
    <% if (brand_storages.length === 0) { %>
        <p>This brand has no Storages</p>
    <% } %>

<%- include('../partials/footer.ejs') %>


















// Middleware para resaltar la opción del menú seleccionada
function highlightMenuOption(req, res, next) {
  // Obtener la opción del menú actual
  let currentOption = req.path;
  
  // Agregar una clase "active" a la opción del menú actual
  res.locals.menuOption = currentOption;
  
  // Continuar con el siguiente middleware
  next();
}

// Aplicar el middleware a todas las rutas
app.use(highlightMenuOption);

// Ruta para la página de inicio
app.get('/', (req, res) => {
  res.render('home', { title: 'Home' });
});

// Ruta para la página de perfil
app.get('/profile', (req, res) => {
  res.render('profile', { title: 'Profile' });
});









// Controlador para la página de inicio
exports.home = (req, res) => {
  // Agregar una clase "active" a la opción del menú actual
  res.locals.menuOption = '/';
  res.render('home', { title: 'Home' });
};

// Controlador para la página de perfil
exports.profile = (req, res) => {
  // Agregar una clase "active" a la opción del menú actual
  res.locals.menuOption = '/profile';
  res.render('profile', { title: 'Profile' });
};




<nav>
  <a href="/home" class="<%= (res.locals.menuOption == 'home') ? 'active' : '' %>">Home</a>
  <a href="/about" class="<%= (res.locals.menuOption == 'about') ? 'active' : '' %>">About</a>
  <a href="/contact" class="<%= (res.locals.menuOption == 'contact') ? 'active' : '' %>">Contact</a>
</nav>




Necesito hacer que el nav cambie cuando voy al apartado de PCS